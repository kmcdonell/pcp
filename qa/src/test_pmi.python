#!/usr/bin/env pmpython
""" Test creation of a PCP archive with metrics via pcp.pmi module """
#
# Copyright (C) 2012-2013 Red Hat Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#

import sys
import unittest
import cpmapi
from pcp import pmi
from pcp import pmapi
from pcp.pmapi import pmContext

OUTFILE = ""

def test_pmi(self, path = OUTFILE, inherit = 0):
    """ Worker utility which creates a pmi object and exercises it """

    hostname = "fu.bar.com"
    timezone = "UTC"

    print("Writing to new PCP archive:", path)
    log = pmi.pmiLogImport(path, inherit)

    code = log.pmiSetHostname(hostname)
    print("pmiSetHostname:", hostname)
    self.assertTrue(code >= 0)

    code = log.pmiSetTimezone(timezone)
    print("pmiSetTimezone:", timezone)
    self.assertTrue(code >= 0)

    pmid = log.pmiID(251, 1, 1)
    print("pmid",pmContext.pmIDStr(pmid))
    units = log.pmiUnits(0, 0, 0, 0, 0, 0)
    print("units",pmContext.pmUnitsStr(units))

    # create a metric without instances (qa.one)
    code = log.pmiAddMetric("qa.one", pmid,
                            cpmapi.PM_TYPE_U32, cpmapi.PM_INDOM_NULL,
                            cpmapi.PM_SEM_DISCRETE, units)
    print("pmiAddMetric: qa.one")
    self.assertTrue(code >= 0)

    # give it a value
    code = log.pmiPutValue("qa.one", "", "42")
    print("pmiPutValue: qa.one")
    self.assertTrue(code >= 0)

    # write record at fixed time (float mode)
    log.pmiWrite(1547483646.654321)

    pmid = log.pmiID(251, 1, 2)
    print("pmid",pmContext.pmIDStr(pmid))
    indom = log.pmiInDom(251, 3)
    print("indom",pmContext.pmInDomStr(indom))
    units = log.pmiUnits(1, -1, 0, cpmapi.PM_SPACE_KBYTE, cpmapi.PM_TIME_SEC, 0)
    print("units",pmContext.pmUnitsStr(units))

    # create a metric with instances (qa.two)
    code = log.pmiAddMetric("qa.two", pmid,
                            cpmapi.PM_TYPE_FLOAT, indom,
                            cpmapi.PM_SEM_DISCRETE, units)
    print("pmiAddMetric: qa.two")
    self.assertTrue(code >= 0)
    code = log.pmiAddInstance(indom, "in", 1)
    print("pmiAddInstance: qa.two[in]")
    self.assertTrue(code >= 0)
    code = log.pmiAddInstance(indom, "out", 2)
    print("pmiAddMetric: qa.two[out]")
    self.assertTrue(code >= 0)
    code = log.pmiAddInstance(indom, "total", 100)
    print("pmiAddMetric: qa.two[total]")
    self.assertTrue(code >= 0)

    # give them values
    code = log.pmiPutValue("qa.two", "in", "42.01")
    print("pmiPutValue: qa.two[in]")
    self.assertTrue(code >= 0)
    code = log.pmiPutValue("qa.two", "out", "42.05")
    print("pmiPutValue: qa.two[out]")
    self.assertTrue(code >= 0)
    code = log.pmiPutValue("qa.two", "total", "84.06")
    print("pmiPutValue: qa.two[total]")
    self.assertTrue(code >= 0)

    # date --date='@1547483647'
    # Tue 15 Jan 2019 03:34:07 AEDT

    # write the record at a fixed time (split mode)
    sec = 1547483647
    usec = 123456
    log.pmiWrite(sec, usec)

    del log


class TestSequenceFunctions(unittest.TestCase):
    """
    Test driver class for pcp.pmi module verification
    """

    def test_context(self):
        """ Wrapper for test_pmi helper which does the heavy lifting """
        test_pmi(self, OUTFILE)

if __name__ == '__main__':

    if (len(sys.argv) == 2):
        OUTFILE = sys.argv[1]
    else:
        print("Usage: " + sys.argv[0] + " OutFile")
        sys.exit(1)

    sys.argv[1:] = ()

    STS = unittest.main()
    sys.exit(STS)

