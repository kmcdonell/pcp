#!/bin/sh
# PCP QA Test No. 713
#
# Exercise encrypted communications between pmproxy/clients
# Copyright (c) 2013 Red Hat.
#

seq=`basename $0`
echo "QA output created by $seq"

rm -rf $seq.full

. ./common.secure

_check_tls

_cleanup()
{
    _restore_config $PCP_TLSCONF_PATH
    unset PCP_SECURE_SOCKETS

    _service pcp restart 2>&1 | _filter_pcp_stop | _filter_pcp_start
    _restore_auto_restart pmcd
    _restore_auto_restart pmproxy
    _wait_for_pmcd
    _wait_for_pmlogger
    $sudo $signal -a pmproxy >/dev/null 2>&1
    if $pmproxy_was_running
    then
	echo "Restart pmproxy ..." >>$here/$seq.full
	_service pmproxy restart >>$here/$seq.full 2>&1
	_wait_for_pmproxy
    else
	echo "Stopping pmproxy ..." >>$here/$seq.full
	_service pmproxy stop >>$here/$seq.full 2>&1
    fi

    $sudo rm -fr $tmp.* $tmp
}

status=1	# failure is the default!
username=`id -u -n`
signal=$PCP_BINADM_DIR/pmsignal
$sudo rm -rf $tmp.*
trap "_cleanup; exit \$status" 0 1 2 3 15

pmproxy_was_running=false
[ -f $PCP_RUN_DIR/pmproxy.pid ] && pmproxy_was_running=true
echo "pmproxy_was_running=$pmproxy_was_running" >>$here/$seq.full

_save_config $PCP_TLSCONF_PATH
_stop_auto_restart pmcd
_service pcp stop | _filter_pcp_stop

# pmcd is now secure.  next, pmproxy...
_stop_auto_restart pmproxy
_service pmproxy stop >/dev/null 2>&1
$sudo $signal -a pmproxy >/dev/null 2>&1

_filter_tls()
{
    sed \
	-e 's/value [0-9][0-9]*/value NUMBER/' \
	-e '/pminfo([0-9][0-9]*)/s//pminfo(PID)/' \
	-e "s/host \"$hostname\"/host LOCALHOST/g" \
	-e 's/^\[[A-Z].. [A-Z]..  *[0-9][0-9]* ..:..:..]/[DATE]/' \
    #end
}

# real QA test starts here
_setup_tls

_service pmcd start | _filter_pcp_start
_service pmproxy start | _filter_pmproxy_start
_wait_for_pmcd
_wait_for_pmproxy

# verify that local clients are unable to establish a connection
# when valid server certificate exists but no client certificate
# and no requirement to verify client certificate.
echo
echo "checking client, server certificate only.  should pass..." | tee -a $seq.full
export PMPROXY_HOST=$hostname
export PCP_SECURE_SOCKETS=enforce
yes | pminfo -h $hostname -f hinv.ncpu 2>&1 | tee -a $seq.full | _filter_tls
unset PMPROXY_HOST PCP_SECURE_SOCKETS

# make the new certificate visible to just this user
echo
echo "checking client, user certificate only.  should pass..."
export PMPROXY_HOST=$hostname
export PCP_SECURE_SOCKETS=enforce
yes | pminfo -h $hostname -f hinv.ncpu 2>&1 | tee -a $seq.full | _filter_tls

# Try a second connection
echo
echo "checking client, user certificate only, second time.  should pass..."
yes | pminfo -h $hostname -f hinv.ncpu 2>&1 | tee -a $seq.full | _filter_tls

unset PMPROXY_HOST PCP_SECURE_SOCKETS

# success, all done
status=0
exit
