#!/bin/sh
# PCP QA Test No. 1679
# pmlogconf - error handling and mem leaks
# [related to Coverity CID 454668]
#
# non-valgrind variant, see qa/1683 for the valgrind variant
#
# Copyright (c) 2025 Ken McDonell.  All Rights Reserved.
#

if [ $# -eq 0 ]
then
    seq=`basename $0`
    echo "QA output created by $seq"
else
    # use $seq from caller, unless not set
    [ -n "$seq" ] || seq=`basename $0`
    echo "QA output created by `basename $0` $*"
fi

# get standard environment, filters and checks
. ./common.product
. ./common.filter
. ./common.check

do_valgrind=false
if [ "$1" = "--valgrind" ]
then
    _check_valgrind
    do_valgrind=true
elif which valgrind >/dev/null 2>&1
then
    [ "$PCPQA_VALGRIND" = both ] || \
        _notrun "valgrind variant qa/1683 will be run"
fi

_cleanup()
{
    cd $here
    $sudo rm -rf $tmp $tmp.*
}

status=0	# success is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_filter()
{
    sed \
	-e "s@$tmp@TMP@g" \
	-e '/^# Auto-generated by pmlogconf on:/s/on: .*/on: DATE/' \
    # end
}

_do_it()
{
    rm -f $tmp.conf
    if $do_valgrind
    then
	_run_valgrind pmlogconf -c -d $tmp $tmp.conf
    else
	pmlogconf -c -d $tmp $tmp.conf 2>&1
    fi \
    | _filter
    _filter <$tmp.conf
}

mkdir $tmp || exit 1
cat <<End-of-File >$tmp.tmp
#pmlogconf-setup 2.0
ident	qa/$seq
delta	1 min
force	include
	sample.bin
End-of-File

# real QA test starts here
echo "repeated delta control lines ..."
$PCP_AWK_PROG <$tmp.tmp >$tmp/qa '
$1 == "delta"	{ print
		  print "delta	5min"
		  next
		}
		{ print }'
_do_it

echo
echo "repeated force control lines ..."
$PCP_AWK_PROG <$tmp.tmp >$tmp/qa '
$1 == "force"	{ print
		  print "force	available"
		  next
		}
		{ print }'
_do_it

echo
echo "repeated probe control lines ..."
$PCP_AWK_PROG <$tmp.tmp >$tmp/qa '
$1 == "force"	{ print "probe foo.bar"
		  print "probe sample.bin"
		  next
		}
		{ print }'
_do_it

# success, all done
exit
